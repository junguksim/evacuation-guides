{"version":3,"sources":["actions/actionTypes.ts","actions/GuideActions.ts","firebase.js","components/Guide.tsx","components/Loading.tsx","components/DownloadFloatButton.tsx","components/GuideList.tsx","components/Home.tsx","components/GuideDetail.tsx","App.tsx","reducers/guide.ts","reducers/reducer.ts","store.ts","index.tsx"],"names":["SET_SELECTED_GUIDE_NAME","SET_SELECTED_GUIDE_IMAGE_SRC","SET_GUIDES","setSelectedGuideName","guideName","dispatch","type","payload","setSelectedGuideImageSrc","guideImageSrc","setGuides","guides","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","getStorage","a","storage","toDataURL","url","fetch","then","response","blob","URL","createObjectURL","download","name","document","createElement","href","body","appendChild","click","removeChild","downloadGuideImageByFloor","floor","pathReference","ref","getDownloadURL","downloadAllGuidesImage","allGuidesZipRef","GuideLayout","styled","div","GuideThumbnail","img","TouchScreenImage","Guide","imageSrc","imageAlt","useDispatch","navigate","useNavigate","onClick","alt","src","process","LoadingPageLayout","LoadingStatement","h2","Loading","DownloadFloatButtonLayout","DownloadFloatButtonSvg","svg","DownloadFloatButton","useState","isList","setIsList","useEffect","locationSplit","window","location","split","length","xmlns","width","height","viewBox","color","d","GuideListLayout","GuideList","useSelector","state","guide","setGuidesInfo","useCallback","guideInfos","placeRef","listAll","placeGuidesList","items","guideRef","push","map","evacuationGuide","index","key","Home","to","GuideDetailLayout","GuideEmergencyWrapper","GuideDetailImage","EmergencyInformationImage","SososimLayout","SososimImage","GuideDetail","selectedGuideName","selectedGuideImageSrc","getImageSrc","App","path","element","initialState","placeId","action","combineReducers","middleware","thunk","store","createStore","reducer","applyMiddleware","ReactDOM","render","basename","StrictMode","getElementById"],"mappings":"0RAKaA,EAA0B,0BAC1BC,EAA+B,+BAC/BC,EAAa,aCHbC,EAAuB,SAACC,GAAD,OAAuB,SAACC,GACxDA,EAAS,CACLC,KAAMN,EACNO,QAAUH,MAILI,EAA2B,SAACC,GAAD,OAA2B,SAACJ,GAChEA,EAAS,CACLC,KAAML,EACNM,QAAUE,MAILC,EAAY,SAACC,GAAD,OAA2B,SAACN,GACjDA,EAAS,CACLC,KAAMJ,EACNK,QAAUI,M,cCTlBC,IAASC,cATc,CACrBC,OAAQ,0CACRC,WAAY,oCACZC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIV,I,4BAAMC,EAAU,uCAAG,4BAAAC,EAAA,6DAClBC,EAAUX,IAASW,UADD,kBAGjBA,GAHiB,2CAAH,qDAKVC,EAAY,SAACC,GACxB,OAAOC,MAAMD,GACVE,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACE,GACL,OAAOC,IAAIC,gBAAgBF,OAI3BG,EAAQ,uCAAG,WAAOP,EAAKQ,GAAZ,IAAAX,EAAA,SAAAA,EAAA,6DACTA,EAAIY,SAASC,cAAc,KADlB,SAEAX,EAAUC,GAFV,OAEfH,EAAEc,KAFa,OAGfd,EAAEU,SAAWC,EACbC,SAASG,KAAKC,YAAYhB,GAC1BA,EAAEiB,QACFL,SAASG,KAAKG,YAAYlB,GANX,2CAAH,wDASDmB,EAAyB,uCAAG,WAAOC,GAAP,mBAAApB,EAAA,6DACjCC,EAAUX,IAASW,UACnBoB,EAAgBpB,EAAQqB,IAAR,YAAiBF,IAFA,SAGrBC,EAAcE,iBAHO,cAGjCpB,EAHiC,gBAIjCO,EAASP,EAAKkB,EAAcV,MAJK,2CAAH,sDAOzBa,EAAsB,uCAAG,gCAAAxB,EAAA,6DAC9BC,EAAUX,IAASW,UACnBwB,EAAkBxB,EAAQqB,IAAI,iPAFA,SAGlBG,EAAgBF,iBAHE,cAG9BpB,EAH8B,gBAI9BO,EAASP,EAAKsB,EAAgBd,MAJA,2CAAH,qD,sBCxB7Be,EAAcC,IAAOC,IAAV,yZAmBXC,EAAiBF,IAAOG,IAAV,+DAKdC,EAAmBJ,IAAOG,IAAV,+DAKPE,EA3CD,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,SAAUC,EAAgC,EAAhCA,SAAUvB,EAAsB,EAAtBA,KAC3B5B,EAAWoD,cACXC,EAAWC,cAEjB,OAAO,eAACX,EAAD,CAAaY,QAAS,WACzBvD,EAASF,EAAqB8B,IAC9B5B,EAASG,EAAyB+C,IAClCG,EAAS,KAAD,OAAMzB,KAHX,UAKH,cAACkB,EAAD,CAAgBU,IAAKL,EAAUM,IAAKP,IACpC,cAACF,EAAD,CAAkBQ,IAAK,GAAIC,IAAKC,4CCTlCC,EAAoBf,IAAOC,IAAV,6IAQjBe,EAAmBhB,IAAOiB,GAAV,gDAKPC,EAlBC,WACZ,OAAO,cAACH,EAAD,UACH,cAACC,EAAD,sE,QC8BFG,EAA4BnB,IAAOC,IAAV,qYAoBzBmB,EAAyBpB,IAAOqB,IAAV,gDAIbC,EAvDa,WAExB,MAA4BC,oBAAkB,GAA9C,mBAAOC,EAAP,KAAeC,EAAf,KAOA,OALAC,qBAAU,WACN,IAAMC,EAAgBC,OAAOC,SAAS1C,KAAK2C,MAAM,KACjDL,EAAsD,WAA5CE,EAAcA,EAAcI,OAAS,MAChD,IAEI,eAACZ,EAAD,CAA2BR,QAAS,WACvC,IAAMgB,EAAgBC,OAAOC,SAAS1C,KAAK2C,MAAM,KAC7CN,EACA3B,IAEAL,EAA0BmC,EAAcA,EAAcI,OAAS,KALhE,UAQC,eAACX,EAAD,CACIY,MAAM,6BACNC,MAAM,KACNC,OAAO,KACPC,QAAQ,YACRC,MAAM,UALV,UAOI,sBAAMC,EAAE,yDACR,sBAAMA,EAAE,kCAEZ,8DCkBNC,GAAkBtC,IAAOC,IAAV,uGAMNsC,GA1CG,WACd,IAAMnF,EAAWoD,cACT9C,EAAW8E,aAAY,SAACC,GAAD,OAAsBA,EAAMC,SAAnDhF,OAEFiF,EAAgBC,sBAAW,sBAAC,0CAAAvE,EAAA,6DACxBwE,EAA0B,GADF,SAERzE,IAFQ,cAExBE,EAFwB,OAGxBwE,EAAWxE,EAAQqB,IAAR,KAHa,SAICmD,EAASC,UAJV,OAIxBC,EAJwB,OAIqBC,MAJrB,cAKPD,GALO,6DAMU,SAD7BE,EALmB,SAMblE,KAAK8C,MAAM,KAAK,GANH,yEAOHoB,EAAStD,iBAPN,QAOpBU,EAPoB,OAQ1BuC,EAAWM,KAAK,CACZ7C,WACAC,SAAU,GACVvB,KAAOkE,EAASlE,OAXM,gJAc9B5B,EAASK,EAAUoF,IAdW,gEAe/B,CAACzF,IAMJ,OAJAsE,qBAAU,WACNiB,MACD,CAACA,IAEG,uCACAjF,GAA4B,IAAlBA,EAAOqE,SAAiB,cAAC,EAAD,IACzC,cAACO,GAAD,UACK5E,GAAUA,EAAOqE,OAAS,GAAKrE,EAAO0F,KAAI,SAACC,EAAiBC,GACzD,OAAO,wBAAC,EAAD,2BAAWD,GAAX,IAA4BE,IAAKD,UAGhD,cAAC,EAAD,Q,SCnCWE,GAPF,WACT,OAAO,qCACH,kEACA,cAAC,KAAD,CAAMC,GAAI,WAAV,+EC8CFC,GAAoB1D,IAAOC,IAAV,wQAajB0D,GAAwB3D,IAAOC,IAAV,sOAYrB2D,GAAmB5D,IAAOG,IAAV,mIAOhB0D,GAA4B7D,IAAOG,IAAV,wJAQzB2D,GAAgB9D,IAAOC,IAAV,kMASb8D,GAAe/D,IAAOG,IAAV,qKASH6D,GApGK,WAChB,IAAM5G,EAAWoD,cACjB,EAAmDgC,aAAY,SAACC,GAAD,OAAsBA,EAAMC,SAApFuB,EAAP,EAAOA,kBAAmBC,EAA1B,EAA0BA,sBAEpBC,EAAcvB,sBAAW,sBAAC,8BAAAvE,EAAA,sEACND,IADM,UACtBE,EADsB,QAExB2F,EAFwB,gCAGD3F,EAAQqB,IAAR,YAAiBsE,IAAqBrE,iBAHrC,OAGlBU,EAHkB,OAIxBlD,EAASG,EAAyB+C,IAJV,2CAM7B,CAAClD,EAAU6G,IAQd,OANAvC,qBAAU,WACN,IAAMC,EAAgBC,OAAOC,SAAS1C,KAAK2C,MAAM,KACjD1E,EAASF,EAAqByE,EAAcA,EAAcI,OAAS,KACnEoC,MACD,CAACA,EAAaF,EAAmB7G,IAE7B,sCACD8G,GAAyB,cAAC,EAAD,IAC1BA,GACG,qCACI,eAACR,GAAD,WACA,eAACC,GAAD,WACI,cAACC,GAAD,CAAkB/C,IAAKqD,EAAuBtD,IAAG,KACjD,cAACiD,GAAD,CAA2BhD,IAAKC,+CAAsDF,IAAG,QAE7F,eAACkD,GAAD,WACI,cAACC,GAAD,CAAclD,IAAKC,sCAA8CF,IAAG,KACpE,cAACmD,GAAD,CAAclD,IAAKC,kCAA0CF,IAAG,KAChE,cAACmD,GAAD,CAAclD,IAAKC,6BAAqCF,IAAG,KAC3D,iLAGR,cAAC,EAAD,WC1BGwD,OAVf,WACE,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,cAAC,GAAD,MACzB,cAAC,IAAD,CAAOD,KAAK,kBAAkBC,QAAS,cAAC,GAAD,MACvC,cAAC,IAAD,CAAOD,KAAK,iCAAiCC,QAAS,cAAC,GAAD,U,kBCAtDC,GAA2B,CAC7BC,QAAU,KACVP,kBAAmB,KACnBC,sBAAuB,KACvBxG,OAAS,MAyBEgF,GAtBD,WAA+D,IAA9DD,EAA6D,uDAArD8B,GAAcE,EAAuC,uCACxE,OAAQA,EAAOpH,MACX,KAAKN,EACD,OAAO,2BACA0F,GADP,IAEIwB,kBAAoBQ,EAAOnH,UAEnC,KAAKN,EACD,OAAO,2BACAyF,GADP,IAEIyB,sBAAwBO,EAAOnH,UAEvC,KAAKL,EACD,OAAO,2BACAwF,GADP,IAEI/E,OAAS+G,EAAOnH,UAExB,QACI,OAAOmF,ICjCJiC,gBAAgB,CAC7BhC,WCGIiC,GAAa,CAACC,MAELC,GADDC,aAAYC,GAFL,GAE4BC,KAAe,WAAf,EAAmBL,KCFpEM,IAASC,OACP,cAAC,KAAD,CAAeC,SAAUrE,qBAAzB,SACE,cAAC,IAAD,CAAU+D,MAAOA,GAAjB,SACE,cAAC,IAAMO,WAAP,UACE,cAAC,GAAD,UAKNnG,SAASoG,eAAe,W","file":"static/js/main.e54c75a0.chunk.js","sourcesContent":["export interface ReduxAction {\n    type: string;\n    payload: any;\n}\nexport const SET_PLACE_ID = \"SET_PLACE_ID\";\nexport const SET_SELECTED_GUIDE_NAME = \"SET_SELECTED_GUIDE_NAME\"\nexport const SET_SELECTED_GUIDE_IMAGE_SRC = \"SET_SELECTED_GUIDE_IMAGE_SRC\"\nexport const SET_GUIDES = \"SET_GUIDES\"","import { Dispatch } from 'redux'\nimport { GuideInfo } from '../reducers/guide'\nimport { ReduxAction, SET_GUIDES, SET_SELECTED_GUIDE_NAME, SET_SELECTED_GUIDE_IMAGE_SRC } from './actionTypes'\n\nexport const setSelectedGuideName = (guideName: string) => (dispatch : Dispatch<ReduxAction>) => {\n    dispatch({\n        type: SET_SELECTED_GUIDE_NAME,\n        payload : guideName\n    })\n}\n\nexport const setSelectedGuideImageSrc = (guideImageSrc: string) => (dispatch : Dispatch<ReduxAction>) => {\n    dispatch({\n        type: SET_SELECTED_GUIDE_IMAGE_SRC,\n        payload : guideImageSrc\n    })\n}\n\nexport const setGuides = (guides : GuideInfo[]) =>  (dispatch : Dispatch<ReduxAction>) => {\n    dispatch({\n        type: SET_GUIDES,\n        payload : guides\n    })\n}","import firebase from \"firebase/compat/app\";\nimport \"firebase/compat/storage\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDWHnNufmc858biN3yTb8VKSu_aEKLGHFI\",\n  authDomain: \"evacuation-guides.firebaseapp.com\",\n  projectId: \"evacuation-guides\",\n  storageBucket: \"evacuation-guides.appspot.com\",\n  messagingSenderId: \"390791888073\",\n  appId: \"1:390791888073:web:f9138cd658af7851172118\",\n  measurementId: \"G-2JTPYZWB9C\",\n};\nfirebase.initializeApp(firebaseConfig);\n\nexport const getStorage = async () => {\n  const storage = firebase.storage();\n\n  return storage;\n};\nexport const toDataURL = (url) => {\n  return fetch(url)\n    .then((response) => {\n      return response.blob();\n    })\n    .then((blob) => {\n      return URL.createObjectURL(blob);\n    });\n};\n\nconst download = async (url, name) => {\n  const a = document.createElement(\"a\");\n  a.href = await toDataURL(url);\n  a.download = name;\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n};\n\nexport const downloadGuideImageByFloor = async (floor) => {\n  const storage = firebase.storage();\n  const pathReference = storage.ref(`1/${floor}`);\n  const url = await pathReference.getDownloadURL();\n  await download(url, pathReference.name);\n};\n\nexport const downloadAllGuidesImage = async () => {\n  const storage = firebase.storage();\n  const allGuidesZipRef = storage.ref(\"1/롯데백화점 포항점 피난안내도 전체.zip\");\n  const url = await allGuidesZipRef.getDownloadURL();\n  await download(url, allGuidesZipRef.name);\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router';\nimport styled from 'styled-components';\nimport { setSelectedGuideName, setSelectedGuideImageSrc } from '../actions/GuideActions';\nimport { GuideInfo } from '../reducers/guide';\n\nconst Guide = ({ imageSrc, imageAlt, name }: GuideInfo) => {\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n\n    return <GuideLayout onClick={() => {\n        dispatch(setSelectedGuideName(name));\n        dispatch(setSelectedGuideImageSrc(imageSrc));\n        navigate(`./${name}`);\n    }}>\n        <GuideThumbnail alt={imageAlt} src={imageSrc}></GuideThumbnail>\n        <TouchScreenImage alt={\"\"} src={process.env.PUBLIC_URL + \"/touch_screen.png\"}/>\n    </GuideLayout>\n}\n\nconst GuideLayout = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    border: 2px solid black;\n    border-radius: 15px;\n    padding: 5px;\n    margin: 6px;\n    cursor: pointer;\n\n    @media only screen and (min-width : 600px) {\n        display: flex;\n        flex-direction: column;\n        width : 50%;\n        height : 60%;\n    }\n`\n\nconst GuideThumbnail = styled.img`\n    width: 90%;\n    height: 80%;\n`\n\nconst TouchScreenImage = styled.img`\n    width: 70%;\n    height: 70%;\n`\n\nexport default Guide;","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Loading = () => {\n    return <LoadingPageLayout>\n        <LoadingStatement>불러오는 중입니다...</LoadingStatement>\n    </LoadingPageLayout>\n}\nconst LoadingPageLayout = styled.div`\n    display: flex;\n    width: 100%;\n    height: 100%;\n    justify-content: center;\n    align-items: center;\n`\n\nconst LoadingStatement = styled.h2`\n    display: flex;\n`\n\n\nexport default Loading;","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { downloadAllGuidesImage, downloadGuideImageByFloor } from '../firebase';\n\nconst DownloadFloatButton = () => {\n\n    const [isList, setIsList] = useState<boolean>(false);\n\n    useEffect(() => {\n        const locationSplit = window.location.href.split(\"/\");\n        setIsList(locationSplit[locationSplit.length - 1] === \"guides\");\n    }, [])\n\n    return <DownloadFloatButtonLayout onClick={() => {\n        const locationSplit = window.location.href.split(\"/\");\n        if (isList) {\n            downloadAllGuidesImage();\n        } else {\n            downloadGuideImageByFloor(locationSplit[locationSplit.length - 1])\n        }\n    }}>\n            <DownloadFloatButtonSvg \n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"30\"\n                height=\"30\"\n                viewBox=\"0 0 20 20\"\n                color=\"#FFFFFF\"\n                >\n                <path d=\"M17 12v5H3v-5H1v5a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-5z\" />\n                <path d=\"M10 15l5-6h-4V1H9v8H5l5 6z\" />\n            </DownloadFloatButtonSvg>\n            <h3>다운로드</h3>\n        </DownloadFloatButtonLayout>\n}\n\nconst DownloadFloatButtonLayout = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap : 10px;\n    position: fixed;\n    right : 10px;\n    bottom : 10px;\n    color : white;\n    border: 1px solid #273890;\n    padding: 5px;\n    border-radius: 10px;\n    cursor: pointer;\n    background-color: #273890;\n\n    :hover {\n        background-color: gray;\n    }\n`\n\nconst DownloadFloatButtonSvg = styled.svg`\n    fill : #FFFFFF\n`\n\nexport default DownloadFloatButton;","\n\nimport React, { useCallback, useEffect } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setGuides } from '../actions/GuideActions';\nimport { getStorage } from '../firebase';\nimport { GuideInfo } from '../reducers/guide';\nimport { RootState } from '../store';\nimport Guide from './Guide';\nimport Loading from './Loading';\nimport styled from 'styled-components';\nimport DownloadFloatButton from './DownloadFloatButton';\n\nconst GuideList = () => {\n    const dispatch = useDispatch();\n    const { guides } = useSelector((state: RootState) => state.guide)\n\n    const setGuidesInfo = useCallback(async () => {\n        const guideInfos: GuideInfo[] = [];\n        const storage = await getStorage();\n        const placeRef = storage.ref(`1`);\n        const placeGuidesList = (await placeRef.listAll()).items;\n        for (const guideRef of placeGuidesList) {\n            if (guideRef.name.split(\".\")[1] !== 'jpg') continue;\n            const imageSrc = await guideRef.getDownloadURL();\n            guideInfos.push({\n                imageSrc,\n                imageAlt: '',\n                name : guideRef.name\n            })\n        }\n        dispatch(setGuides(guideInfos));\n    }, [dispatch])\n\n    useEffect(() => {\n        setGuidesInfo();\n    }, [setGuidesInfo])\n\n    return <>\n        {(!guides || guides.length === 0) && <Loading /> }\n    <GuideListLayout>\n        {guides && guides.length > 0 && guides.map((evacuationGuide, index) => {\n            return <Guide {...evacuationGuide} key={index} />\n        })}\n    </GuideListLayout>\n    <DownloadFloatButton />\n    </>\n}\n\nconst GuideListLayout = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`\n\nexport default GuideList;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Home = () => {\n    return <>\n        <h1>안녕하세요!!</h1>\n        <Link to={'1/guides'}>롯데백화점 피난안내도</Link>\n    </>\n}\n\nexport default Home;","import React, { useEffect } from \"react\";\nimport { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport { setSelectedGuideImageSrc, setSelectedGuideName } from '../actions/GuideActions';\nimport { getStorage } from '../firebase';\nimport { RootState } from '../store';\nimport DownloadFloatButton from './DownloadFloatButton';\nimport Loading from './Loading';\n\nconst GuideDetail = () => {\n    const dispatch = useDispatch();\n    const {selectedGuideName, selectedGuideImageSrc} = useSelector((state: RootState) => state.guide)\n    \n    const getImageSrc = useCallback(async () => {\n        const storage = await getStorage();\n        if (selectedGuideName) {\n            const imageSrc = await storage.ref(`1/${selectedGuideName}`).getDownloadURL();\n            dispatch(setSelectedGuideImageSrc(imageSrc));\n        }\n    }, [dispatch, selectedGuideName])\n\n    useEffect(() => {\n        const locationSplit = window.location.href.split(\"/\");\n        dispatch(setSelectedGuideName(locationSplit[locationSplit.length - 1]));\n        getImageSrc();\n    }, [getImageSrc, selectedGuideName, dispatch])\n\n    return <>\n        {!selectedGuideImageSrc && <Loading />}\n        {selectedGuideImageSrc &&\n            <>\n                <GuideDetailLayout>\n                <GuideEmergencyWrapper>\n                    <GuideDetailImage src={selectedGuideImageSrc} alt={``} ></GuideDetailImage>\n                    <EmergencyInformationImage src={process.env.PUBLIC_URL +`/emergency_information.png`} alt={``} ></EmergencyInformationImage>\n                </GuideEmergencyWrapper>\n                <SososimLayout>\n                    <SososimImage src={process.env.PUBLIC_URL + `/extinguisher.png`} alt={``} />\n                    <SososimImage src={process.env.PUBLIC_URL + `/fireplug.png`} alt={``} />\n                    <SososimImage src={process.env.PUBLIC_URL + `/cpr.png`} alt={``} />\n                    <h3>포항북부소방서와 롯데백화점 포항점은 함께 합니다.</h3>\n                </SososimLayout>\n                </GuideDetailLayout>\n            <DownloadFloatButton />\n            </>\n            \n        }\n        \n    </>\n}\n\nconst GuideDetailLayout = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n\n    @media only screen and (max-width : 600px) {\n        display: flex;\n        flex-direction: column;\n    }\n`\n\nconst GuideEmergencyWrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    gap : 10px;\n\n    @media only screen and (max-width : 600px) {\n        display: flex;\n        height: 100%;\n    }\n`\n\nconst GuideDetailImage = styled.img`\n    @media only screen and (max-width : 600px) {\n        display: flex;\n        width: 100%;\n    }\n`\n\nconst EmergencyInformationImage = styled.img`\n    @media only screen and (max-width : 600px) {\n        display: flex;\n        width: 100%;\n        height: 10%\n    }\n`\n\nconst SososimLayout = styled.div`\n    @media only screen and (max-width : 600px) {\n        width: 100%;\n        display: flex;\n        align-items: center;\n        flex-direction: column;\n    }\n`\n\nconst SososimImage = styled.img`\n    width: 60%;\n    height: 60%;\n    @media only screen and (max-width : 600px) {\n        width: 100%;\n        height: 100%;\n    }\n`\n\nexport default GuideDetail;","import React from 'react';\nimport './App.css';\nimport GuideList from './components/GuideList';\nimport Home from './components/Home';\nimport {  Route, Routes } from 'react-router-dom';\nimport GuideDetail from './components/GuideDetail';\n\n\nfunction App() {\n  return (\n    <Routes>\n      <Route path=\"/\" element={<Home />} />\n      <Route path=':placeId/guides' element={<GuideList />} />\n      <Route path=':placeId/guides/:guideDetailId' element={<GuideDetail />} />\n    </Routes>\n  );\n} \n\nexport default App;\n","import { ReduxAction, SET_GUIDES, SET_SELECTED_GUIDE_NAME, SET_SELECTED_GUIDE_IMAGE_SRC } from '../actions/actionTypes'\n\nexport interface GuideInfo {\n    imageSrc: string;\n    imageAlt: string;\n    name: string;\n}\nexport interface GuideState {\n    placeId: null | string;\n    selectedGuideName: null | string;\n    selectedGuideImageSrc: null | string;\n    guides: null | GuideInfo[];\n}\nconst initialState: GuideState = {\n    placeId : null,\n    selectedGuideName: null,\n    selectedGuideImageSrc: null,\n    guides : null,\n}\n\nconst guide = (state = initialState, action : ReduxAction) : GuideState =>  {\n    switch (action.type) {\n        case SET_SELECTED_GUIDE_NAME:\n            return {\n                ...state,\n                selectedGuideName : action.payload\n            }\n        case SET_SELECTED_GUIDE_IMAGE_SRC:\n            return {\n                ...state,\n                selectedGuideImageSrc : action.payload\n            }\n        case SET_GUIDES:\n            return {\n                ...state,\n                guides : action.payload\n            }\n        default:\n            return state;\n    }\n}\n\nexport default guide;","import { combineReducers } from \"redux\";\n\nimport guide from './guide';\n\n\nexport default combineReducers({\n  guide\n});\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { GuideState } from './reducers/guide';\nimport reducer from \"./reducers/reducer\";\n\nexport interface RootState {\n    guide : GuideState\n}\nconst initialState = {};\nconst middleware = [thunk];\nconst store = createStore(reducer, initialState, applyMiddleware(...middleware));\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './store';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Provider store={store}>\n      <React.StrictMode>\n        <App/>\n      </React.StrictMode>\n      </Provider>\n  </BrowserRouter>\n  ,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
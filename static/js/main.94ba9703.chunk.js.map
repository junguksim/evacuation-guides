{"version":3,"sources":["actions/actionTypes.ts","actions/GuideActions.ts","firebase.js","components/Guide.tsx","components/Loading.tsx","components/DownloadFloatButton.tsx","components/GuideList.tsx","components/Home.tsx","components/GuideDetail.tsx","App.tsx","reducers/guide.ts","reducers/reducer.ts","store.ts","index.tsx"],"names":["SET_PLACE_ID","SET_PLACE_NAME","SET_SELECTED_GUIDE_NAME","SET_SELECTED_GUIDE_IMAGE_SRC","SET_GUIDES","SET_ENTIRE_DOWNLOAD_FILE_NAME","setPlaceName","placeName","dispatch","type","payload","setSelectedGuideName","guideName","setSelectedGuideImageSrc","guideImageSrc","setGuides","guides","setEntireDownloadFileName","entireDownloadFileName","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","getStorage","a","storage","toDataURL","url","fetch","then","response","blob","URL","createObjectURL","download","name","document","createElement","href","body","appendChild","click","removeChild","downloadGuideImageByFloor","placeId","floor","pathReference","ref","getDownloadURL","downloadAllGuidesImage","allGuidesZipRef","GuideLayout","styled","div","GuideThumbnail","img","TouchScreenImage","Guide","imageSrc","imageAlt","useDispatch","navigate","useNavigate","onClick","alt","src","process","LoadingPageLayout","LoadingStatement","h2","Loading","DownloadFloatButtonLayout","DownloadFloatButtonSvg","svg","DownloadFloatButton","useState","isList","setIsList","useSelector","state","guide","useEffect","locationSplit","window","location","split","length","downloadButtonOnclick","useCallback","xmlns","width","height","viewBox","color","d","GuideListLayout","GuideList","setPlaceIdState","setGuidesInfo","guideInfos","placeRef","listAll","placeGuidesList","items","guideRef","list","search","push","setPlaceId","map","evacuationGuide","index","key","Home","to","GuideDetailLayout","GuideEmergencyWrapper","GuideDetailImage","EmergencyInformationImage","SososimLayout","SososimImage","GuideDetail","selectedGuideName","selectedGuideImageSrc","getImageSrc","App","path","element","initialState","action","combineReducers","middleware","thunk","store","createStore","reducer","applyMiddleware","ReactDOM","render","basename","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.94ba9703.chunk.js","sourcesContent":["export interface ReduxAction {\n  type: string;\n  payload: any;\n}\nexport const SET_PLACE_ID = \"SET_PLACE_ID\";\nexport const SET_PLACE_NAME = \"SET_PLACE_NAME\";\nexport const SET_SELECTED_GUIDE_NAME = \"SET_SELECTED_GUIDE_NAME\";\nexport const SET_SELECTED_GUIDE_IMAGE_SRC = \"SET_SELECTED_GUIDE_IMAGE_SRC\";\nexport const SET_GUIDES = \"SET_GUIDES\";\nexport const SET_ENTIRE_DOWNLOAD_FILE_NAME = \"SET_ENTIRE_DOWNLOAD_FILE_NAME\";\n","import { Dispatch } from \"redux\";\nimport { GuideInfo } from \"../reducers/guide\";\nimport { ReduxAction, SET_GUIDES, SET_SELECTED_GUIDE_NAME, SET_SELECTED_GUIDE_IMAGE_SRC, SET_PLACE_ID, SET_ENTIRE_DOWNLOAD_FILE_NAME, SET_PLACE_NAME } from \"./actionTypes\";\n\nexport const setPlaceId = (placeId: string) => (dispatch: Dispatch<ReduxAction>) => {\n  dispatch({\n    type: SET_PLACE_ID,\n    payload: placeId,\n  });\n};\n\nexport const setPlaceName = (placeName: string) => (dispatch: Dispatch<ReduxAction>) => {\n  dispatch({\n    type: SET_PLACE_NAME,\n    payload: placeName,\n  });\n};\n\nexport const setSelectedGuideName = (guideName: string) => (dispatch: Dispatch<ReduxAction>) => {\n  dispatch({\n    type: SET_SELECTED_GUIDE_NAME,\n    payload: guideName,\n  });\n};\n\nexport const setSelectedGuideImageSrc = (guideImageSrc: string) => (dispatch: Dispatch<ReduxAction>) => {\n  dispatch({\n    type: SET_SELECTED_GUIDE_IMAGE_SRC,\n    payload: guideImageSrc,\n  });\n};\n\nexport const setGuides = (guides: GuideInfo[]) => (dispatch: Dispatch<ReduxAction>) => {\n  dispatch({\n    type: SET_GUIDES,\n    payload: guides,\n  });\n};\n\nexport const setEntireDownloadFileName = (entireDownloadFileName: string) => (dispatch: Dispatch<ReduxAction>) => {\n  dispatch({\n    type: SET_ENTIRE_DOWNLOAD_FILE_NAME,\n    payload: entireDownloadFileName,\n  });\n};\n","import firebase from \"firebase/compat/app\";\nimport \"firebase/compat/storage\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDWHnNufmc858biN3yTb8VKSu_aEKLGHFI\",\n  authDomain: \"evacuation-guides.firebaseapp.com\",\n  projectId: \"evacuation-guides\",\n  storageBucket: \"evacuation-guides.appspot.com\",\n  messagingSenderId: \"390791888073\",\n  appId: \"1:390791888073:web:f9138cd658af7851172118\",\n  measurementId: \"G-2JTPYZWB9C\",\n};\nfirebase.initializeApp(firebaseConfig);\n\nexport const getStorage = async () => {\n  const storage = firebase.storage();\n\n  return storage;\n};\nexport const toDataURL = (url) => {\n  return fetch(url)\n    .then((response) => {\n      return response.blob();\n    })\n    .then((blob) => {\n      return URL.createObjectURL(blob);\n    });\n};\n\nconst download = async (url, name) => {\n  const a = document.createElement(\"a\");\n  a.href = await toDataURL(url);\n  a.download = name;\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n};\n\nexport const downloadGuideImageByFloor = async (placeId, floor) => {\n  const storage = firebase.storage();\n  const pathReference = storage.ref(`${placeId}/${floor}`);\n  const url = await pathReference.getDownloadURL();\n  await download(url, pathReference.name);\n};\n\nexport const downloadAllGuidesImage = async (placeId, entireDownloadFileName) => {\n  const storage = firebase.storage();\n  const allGuidesZipRef = storage.ref(`${placeId}/${entireDownloadFileName}`);\n  const url = await allGuidesZipRef.getDownloadURL();\n  await download(url, allGuidesZipRef.name);\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router';\nimport styled from 'styled-components';\nimport { setSelectedGuideName, setSelectedGuideImageSrc } from '../actions/GuideActions';\nimport { GuideInfo } from '../reducers/guide';\n\nconst Guide = ({ imageSrc, imageAlt, name }: GuideInfo) => {\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n\n    return <GuideLayout onClick={() => {\n        dispatch(setSelectedGuideName(name));\n        dispatch(setSelectedGuideImageSrc(imageSrc));\n        navigate(`./${name}`);\n    }}>\n        <GuideThumbnail alt={imageAlt} src={imageSrc}></GuideThumbnail>\n        <TouchScreenImage alt={\"\"} src={process.env.PUBLIC_URL + \"/touch_screen.png\"}/>\n    </GuideLayout>\n}\n\nconst GuideLayout = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    border: 2px solid black;\n    border-radius: 15px;\n    padding: 5px;\n    margin: 6px;\n    cursor: pointer;\n\n    @media only screen and (min-width : 600px) {\n        display: flex;\n        flex-direction: column;\n        width : 50%;\n        height : 60%;\n    }\n`\n\nconst GuideThumbnail = styled.img`\n    width: 90%;\n    height: 80%;\n`\n\nconst TouchScreenImage = styled.img`\n    width: 70%;\n    height: 70%;\n`\n\nexport default Guide;","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Loading = () => {\n    return <LoadingPageLayout>\n        <LoadingStatement>불러오는 중입니다...</LoadingStatement>\n    </LoadingPageLayout>\n}\nconst LoadingPageLayout = styled.div`\n    display: flex;\n    width: 100%;\n    height: 100%;\n    justify-content: center;\n    align-items: center;\n`\n\nconst LoadingStatement = styled.h2`\n    display: flex;\n`\n\n\nexport default Loading;","import React, { useCallback, useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { downloadAllGuidesImage, downloadGuideImageByFloor } from \"../firebase\";\nimport { RootState } from \"../store\";\n\nconst DownloadFloatButton = () => {\n  const [isList, setIsList] = useState<boolean>(false);\n  const { placeId, entireDownloadFileName } = useSelector((state: RootState) => state.guide);\n\n  useEffect(() => {\n    const locationSplit = window.location.href.split(\"/\");\n    setIsList(locationSplit[locationSplit.length - 1] === \"guides\");\n  }, [placeId, entireDownloadFileName]);\n\n  const downloadButtonOnclick = useCallback(() => {\n    const locationSplit = window.location.href.split(\"/\");\n    if (isList) {\n      downloadAllGuidesImage(placeId, entireDownloadFileName);\n    } else {\n      downloadGuideImageByFloor(placeId, locationSplit[locationSplit.length - 1]);\n    }\n  }, [placeId, isList, entireDownloadFileName]);\n\n  return (\n    <DownloadFloatButtonLayout onClick={downloadButtonOnclick}>\n      <DownloadFloatButtonSvg xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"30\" viewBox=\"0 0 20 20\" color=\"#FFFFFF\">\n        <path d=\"M17 12v5H3v-5H1v5a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-5z\" />\n        <path d=\"M10 15l5-6h-4V1H9v8H5l5 6z\" />\n      </DownloadFloatButtonSvg>\n      <h3>다운로드</h3>\n    </DownloadFloatButtonLayout>\n  );\n};\n\nconst DownloadFloatButtonLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 10px;\n  position: fixed;\n  right: 10px;\n  bottom: 10px;\n  color: white;\n  border: 1px solid #273890;\n  padding: 5px;\n  border-radius: 10px;\n  cursor: pointer;\n  background-color: #273890;\n\n  :hover {\n    background-color: gray;\n  }\n`;\n\nconst DownloadFloatButtonSvg = styled.svg`\n  fill: #ffffff;\n`;\n\nexport default DownloadFloatButton;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setEntireDownloadFileName, setGuides, setPlaceId, setPlaceName } from \"../actions/GuideActions\";\nimport { getStorage } from \"../firebase\";\nimport { GuideInfo } from \"../reducers/guide\";\nimport { RootState } from \"../store\";\nimport Guide from \"./Guide\";\nimport Loading from \"./Loading\";\nimport styled from \"styled-components\";\nimport DownloadFloatButton from \"./DownloadFloatButton\";\n\nconst GuideList = () => {\n  const dispatch = useDispatch();\n  const { guides } = useSelector((state: RootState) => state.guide);\n  const [placeId, setPlaceIdState] = useState<string>(\"\");\n\n  const setGuidesInfo = useCallback(async () => {\n    const guideInfos: GuideInfo[] = [];\n    const storage = await getStorage();\n    const placeRef = storage.ref(placeId);\n    const placeGuidesList = (await placeRef.listAll()).items;\n    for (const guideRef of placeGuidesList) {\n      if (guideRef.name.split(\".\")[1] === \"zip\") {\n        let placeName = \"\";\n        const list = guideRef.name.split(\" \");\n        for (const name of list) {\n          if (name.search(\"피난안내도\") >= 0) break;\n          placeName += `${name} `;\n        }\n        dispatch(setPlaceName(placeName));\n        dispatch(setEntireDownloadFileName(guideRef.name));\n        continue;\n      }\n      if (guideRef.name.split(\".\")[1] === \"jpg\" || guideRef.name.split(\".\")[1] === \"png\" || guideRef.name.split(\".\")[1] === \"jpeg\") {\n        const imageSrc = await guideRef.getDownloadURL();\n        guideInfos.push({\n          imageSrc,\n          imageAlt: \"\",\n          name: guideRef.name,\n        });\n      }\n    }\n    dispatch(setGuides(guideInfos));\n  }, [dispatch, placeId]);\n\n  useEffect(() => {\n    setGuidesInfo();\n  }, [setGuidesInfo]);\n\n  useEffect(() => {\n    const locationSplit = window.location.href.split(\"/guides\");\n    setPlaceIdState(locationSplit[0].split(\"/evacuation-guides/\")[1]);\n    dispatch(setPlaceId(placeId));\n  }, [dispatch, setPlaceIdState, placeId]);\n\n  return (\n    <>\n      {(!guides || guides.length === 0) && <Loading />}\n      <GuideListLayout>\n        {guides &&\n          guides.length > 0 &&\n          guides.map((evacuationGuide, index) => {\n            return <Guide {...evacuationGuide} key={index} />;\n          })}\n      </GuideListLayout>\n      {guides && guides.length > 0 && <DownloadFloatButton />}\n    </>\n  );\n};\n\nconst GuideListLayout = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport default GuideList;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Home = () => {\n    return <>\n        <h1>안녕하세요!!</h1>\n        <Link to={'1/guides'}>롯데백화점 피난안내도</Link>\n    </>\n}\n\nexport default Home;","import React, { useEffect } from \"react\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { setSelectedGuideImageSrc, setSelectedGuideName } from \"../actions/GuideActions\";\nimport { getStorage } from \"../firebase\";\nimport { RootState } from \"../store\";\nimport DownloadFloatButton from \"./DownloadFloatButton\";\nimport Loading from \"./Loading\";\n\nconst GuideDetail = () => {\n  const dispatch = useDispatch();\n  const { selectedGuideName, selectedGuideImageSrc, placeName } = useSelector((state: RootState) => state.guide);\n\n  const getImageSrc = useCallback(async () => {\n    const storage = await getStorage();\n    if (selectedGuideName) {\n      const imageSrc = await storage.ref(`1/${selectedGuideName}`).getDownloadURL();\n      dispatch(setSelectedGuideImageSrc(imageSrc));\n    }\n  }, [dispatch, selectedGuideName]);\n\n  useEffect(() => {\n    const locationSplit = window.location.href.split(\"/\");\n    dispatch(setSelectedGuideName(locationSplit[locationSplit.length - 1]));\n    getImageSrc();\n  }, [getImageSrc, selectedGuideName, dispatch]);\n\n  return (\n    <>\n      {!selectedGuideImageSrc && <Loading />}\n      {selectedGuideImageSrc && (\n        <>\n          <GuideDetailLayout>\n            <GuideEmergencyWrapper>\n              <GuideDetailImage src={selectedGuideImageSrc} alt={``}></GuideDetailImage>\n              <EmergencyInformationImage src={process.env.PUBLIC_URL + `/emergency_information.png`} alt={``}></EmergencyInformationImage>\n            </GuideEmergencyWrapper>\n            <SososimLayout>\n              <SososimImage src={process.env.PUBLIC_URL + `/extinguisher.png`} alt={``} />\n              <SososimImage src={process.env.PUBLIC_URL + `/fireplug.png`} alt={``} />\n              <SososimImage src={process.env.PUBLIC_URL + `/cpr.png`} alt={``} />\n              <h3>포항북부소방서와 {placeName}은/는 함께 합니다.</h3>\n            </SososimLayout>\n          </GuideDetailLayout>\n          <DownloadFloatButton />\n        </>\n      )}\n    </>\n  );\n};\n\nconst GuideDetailLayout = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n\n  @media only screen and (max-width: 600px) {\n    display: flex;\n    flex-direction: column;\n  }\n`;\n\nconst GuideEmergencyWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  gap: 10px;\n\n  @media only screen and (max-width: 600px) {\n    display: flex;\n    height: 100%;\n  }\n`;\n\nconst GuideDetailImage = styled.img`\n  @media only screen and (max-width: 600px) {\n    display: flex;\n    width: 100%;\n  }\n`;\n\nconst EmergencyInformationImage = styled.img`\n  @media only screen and (max-width: 600px) {\n    display: flex;\n    width: 100%;\n    height: 10%;\n  }\n`;\n\nconst SososimLayout = styled.div`\n  @media only screen and (max-width: 600px) {\n    width: 100%;\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n  }\n`;\n\nconst SososimImage = styled.img`\n  width: 60%;\n  height: 60%;\n  @media only screen and (max-width: 600px) {\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nexport default GuideDetail;\n","import React from 'react';\nimport './App.css';\nimport GuideList from './components/GuideList';\nimport Home from './components/Home';\nimport {  Route, Routes } from 'react-router-dom';\nimport GuideDetail from './components/GuideDetail';\n\n\nfunction App() {\n  return (\n    <Routes>\n      <Route path=\"/\" element={<Home />} />\n      <Route path=':placeId/guides' element={<GuideList />} />\n      <Route path=':placeId/guides/:guideDetailId' element={<GuideDetail />} />\n    </Routes>\n  );\n} \n\nexport default App;\n","import { ReduxAction, SET_GUIDES, SET_SELECTED_GUIDE_NAME, SET_SELECTED_GUIDE_IMAGE_SRC, SET_PLACE_ID, SET_ENTIRE_DOWNLOAD_FILE_NAME, SET_PLACE_NAME } from \"../actions/actionTypes\";\n\nexport interface GuideInfo {\n  imageSrc: string;\n  imageAlt: string;\n  name: string;\n}\nexport interface GuideState {\n  placeId: null | string;\n  placeName: null | string;\n  selectedGuideName: null | string;\n  selectedGuideImageSrc: null | string;\n  guides: null | GuideInfo[];\n  entireDownloadFileName: null | string;\n}\nconst initialState: GuideState = {\n  placeId: null,\n  placeName: null,\n  selectedGuideName: null,\n  selectedGuideImageSrc: null,\n  guides: null,\n  entireDownloadFileName: null,\n};\n\nconst guide = (state = initialState, action: ReduxAction): GuideState => {\n  switch (action.type) {\n    case SET_ENTIRE_DOWNLOAD_FILE_NAME:\n      return {\n        ...state,\n        entireDownloadFileName: action.payload,\n      };\n    case SET_PLACE_ID:\n      return {\n        ...state,\n        placeId: action.payload,\n      };\n    case SET_PLACE_NAME:\n      return {\n        ...state,\n        placeName: action.payload,\n      };\n    case SET_SELECTED_GUIDE_NAME:\n      return {\n        ...state,\n        selectedGuideName: action.payload,\n      };\n    case SET_SELECTED_GUIDE_IMAGE_SRC:\n      return {\n        ...state,\n        selectedGuideImageSrc: action.payload,\n      };\n    case SET_GUIDES:\n      return {\n        ...state,\n        guides: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default guide;\n","import { combineReducers } from \"redux\";\n\nimport guide from './guide';\n\n\nexport default combineReducers({\n  guide\n});\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { GuideState } from './reducers/guide';\nimport reducer from \"./reducers/reducer\";\n\nexport interface RootState {\n    guide : GuideState\n}\nconst initialState = {};\nconst middleware = [thunk];\nconst store = createStore(reducer, initialState, applyMiddleware(...middleware));\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './store';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Provider store={store}>\n      <React.StrictMode>\n        <App/>\n      </React.StrictMode>\n      </Provider>\n  </BrowserRouter>\n  ,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}